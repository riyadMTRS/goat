<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SecureCommunity - Supabase Edition</title>
    <!-- Include Supabase SDK -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <style>
        :root {
            --primary-color: #3ecf8e;
            --secondary-color: #2b825b;
            --bg-color: #f0f2f5;
            --card-bg: white;
            --border-color: #dddfe2;
            --text-color: #1c1e21;
            --error-color: #e74c3c;
            --success-color: #27ae60;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            line-height: 1.6;
            padding: 0;
            margin: 0;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 15px 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }
        
        .logo {
            font-size: 24px;
            font-weight: bold;
            display: flex;
            align-items: center;
        }
        
        .logo i {
            margin-right: 10px;
            font-size: 28px;
        }
        
        /* Auth Styles */
        #auth-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 80vh;
            padding: 20px;
        }
        
        .auth-card {
            background: var(--card-bg);
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 450px;
            padding: 25px;
        }
        
        .auth-tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 1px solid var(--border-color);
        }
        
        .auth-tab {
            padding: 12px 20px;
            cursor: pointer;
            text-align: center;
            flex: 1;
            font-weight: 600;
            color: #65676b;
            border-bottom: 3px solid transparent;
        }
        
        .auth-tab.active {
            color: var(--primary-color);
            border-bottom: 3px solid var(--primary-color);
        }
        
        .auth-form {
            display: none;
        }
        
        .auth-form.active {
            display: block;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        .form-control {
            width: 100%;
            padding: 14px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 16px;
            background-color: #f5f6f7;
        }
        
        .btn {
            display: block;
            width: 100%;
            padding: 14px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            text-align: center;
            transition: all 0.2s;
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }
        
        .btn-primary:hover {
            background-color: var(--secondary-color);
        }
        
        .alert {
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 15px;
            display: none;
        }
        
        .alert-error {
            background-color: #ffebee;
            color: var(--error-color);
            border: 1px solid #f5b7b1;
        }
        
        .alert-success {
            background-color: #e8f5e9;
            color: var(--success-color);
            border: 1px solid #a3e4d7;
        }
        
        /* Main App Styles */
        #main-app {
            display: none;
        }
        
        .app-content {
            display: flex;
            gap: 20px;
            margin-top: 20px;
        }
        
        .sidebar {
            flex: 0 0 280px;
            background: var(--card-bg);
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            height: fit-content;
        }
        
        .user-profile {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background-color: var(--primary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            font-weight: bold;
            margin-right: 15px;
        }
        
        .user-info h3 {
            margin-bottom: 5px;
        }
        
        .points-display {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            color: white;
            padding: 15px;
            border-radius: 12px;
            text-align: center;
            margin: 15px 0;
        }
        
        .points-display h2 {
            font-size: 28px;
            margin-bottom: 5px;
        }
        
        .nav-menu {
            list-style: none;
            margin-top: 20px;
        }
        
        .nav-item {
            padding: 12px 15px;
            border-radius: 8px;
            margin-bottom: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            transition: background 0.2s;
        }
        
        .nav-item i {
            margin-right: 10px;
            font-size: 20px;
        }
        
        .nav-item:hover, .nav-item.active {
            background-color: #f0f2f5;
        }
        
        .nav-item.active {
            font-weight: 600;
            color: var(--primary-color);
        }
        
        .main-content {
            flex: 1;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .card {
            background: var(--card-bg);
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--border-color);
        }
        
        .create-post {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .post-input {
            flex: 1;
            padding: 12px 15px;
            border: 1px solid var(--border-color);
            border-radius: 24px;
            margin-left: 15px;
            background-color: #f0f2f5;
            cursor: pointer;
        }
        
        .post {
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--border-color);
        }
        
        .post-header {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .post-user {
            font-weight: 600;
            margin-right: 10px;
        }
        
        .post-time {
            color: #65676b;
            font-size: 0.9em;
        }
        
        .post-content {
            margin-bottom: 10px;
        }
        
        .media-container {
            position: relative;
            margin: 15px 0;
            text-align: center;
        }
        
        .protected-media {
            max-width: 100%;
            border-radius: 8px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        
        .post-actions {
            display: flex;
            gap: 10px;
        }
        
        .post-action {
            display: flex;
            align-items: center;
            padding: 8px 12px;
            border-radius: 8px;
            background-color: #f0f2f5;
            cursor: pointer;
            transition: background 0.2s;
        }
        
        .post-action:hover {
            background-color: #e4e6eb;
        }
        
        .post-action i {
            margin-right: 5px;
        }
        
        /* Chat Styles */
        .chat-container {
            display: flex;
            flex-direction: column;
            height: 600px;
        }
        
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 12px;
            margin-bottom: 15px;
        }
        
        .message {
            margin-bottom: 15px;
            max-width: 80%;
        }
        
        .message.sent {
            margin-left: auto;
        }
        
        .message-content {
            padding: 12px 16px;
            border-radius: 18px;
            display: inline-block;
        }
        
        .message.received .message-content {
            background-color: var(--card-bg);
            border: 1px solid var(--border-color);
        }
        
        .message.sent .message-content {
            background-color: var(--primary-color);
            color: white;
        }
        
        .message-sender {
            font-weight: 600;
            margin-bottom: 5px;
            font-size: 0.9em;
        }
        
        .chat-input {
            display: flex;
            gap: 10px;
        }
        
        .chat-input input {
            flex: 1;
            padding: 14px;
            border: 1px solid var(--border-color);
            border-radius: 24px;
            font-size: 16px;
        }
        
        /* Share Tab Styles */
        .upload-area {
            border: 2px dashed var(--border-color);
            border-radius: 12px;
            padding: 30px;
            text-align: center;
            margin-bottom: 20px;
            cursor: pointer;
            transition: border-color 0.2s;
        }
        
        .upload-area:hover {
            border-color: var(--primary-color);
        }
        
        .upload-area i {
            font-size: 42px;
            color: #65676b;
            margin-bottom: 15px;
        }
        
        /* Rewards Tab Styles */
        .rewards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .reward-card {
            background: var(--card-bg);
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s;
        }
        
        .reward-card:hover {
            transform: translateY(-5px);
        }
        
        .reward-icon {
            font-size: 42px;
            color: #f39c12;
            margin-bottom: 15px;
        }
        
        .reward-amount {
            font-size: 24px;
            font-weight: bold;
            color: var(--primary-color);
            margin-bottom: 10px;
        }
        
        /* Footer */
        footer {
            background-color: var(--card-bg);
            padding: 20px 0;
            text-align: center;
            margin-top: 40px;
            border-top: 1px solid var(--border-color);
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .app-content {
                flex-direction: column;
            }
            
            .sidebar {
                flex: 0 0 auto;
                margin-bottom: 20px;
            }
            
            .chat-input {
                flex-direction: column;
            }
            
            .rewards-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>
    <!-- Header -->
    <header>
        <div class="header-content">
            <div class="logo">
                <i class="fas fa-shield-alt"></i>
                <span>SecureCommunity</span>
            </div>
        </div>
    </header>

    <!-- Main Container -->
    <div class="container">
        <!-- Authentication Container -->
        <div id="auth-container">
            <div class="auth-card">
                <div class="auth-tabs">
                    <div class="auth-tab active" onclick="showAuthTab('login')">Login</div>
                    <div class="auth-tab" onclick="showAuthTab('register')">Register</div>
                </div>
                
                <div id="login-form" class="auth-form active">
                    <div id="login-alert" class="alert alert-error"></div>
                    <div class="form-group">
                        <label for="login-email">Email</label>
                        <input type="email" id="login-email" class="form-control" placeholder="Enter your email">
                    </div>
                    <div class="form-group">
                        <label for="login-password">Password</label>
                        <input type="password" id="login-password" class="form-control" placeholder="Enter your password">
                    </div>
                    <button class="btn btn-primary" onclick="login()">Log In</button>
                </div>
                
                <div id="register-form" class="auth-form">
                    <div id="register-alert" class="alert alert-error"></div>
                    <div class="form-group">
                        <label for="register-username">Username</label>
                        <input type="text" id="register-username" class="form-control" placeholder="Choose a username">
                    </div>
                    <div class="form-group">
                        <label for="register-email">Email</label>
                        <input type="email" id="register-email" class="form-control" placeholder="Enter your email">
                    </div>
                    <div class="form-group">
                        <label for="register-password">Password</label>
                        <input type="password" id="register-password" class="form-control" placeholder="Create a password (min. 6 characters)">
                    </div>
                    <button class="btn btn-primary" onclick="register()">Create Account</button>
                </div>
            </div>
        </div>

        <!-- Main Application -->
        <div id="main-app">
            <div class="app-content">
                <!-- Sidebar -->
                <div class="sidebar">
                    <div class="user-profile">
                        <div class="avatar" id="user-avatar">U</div>
                        <div class="user-info">
                            <h3 id="user-name">User</h3>
                            <span id="user-status">Online</span>
                        </div>
                    </div>
                    
                    <div class="points-display">
                        <h2 id="user-points">0</h2>
                        <p>Reward Points</p>
                    </div>
                    
                    <ul class="nav-menu">
                        <li class="nav-item active" onclick="showTab('feed')">
                            <i class="fas fa-home"></i>
                            <span>Feed</span>
                        </li>
                        <li class="nav-item" onclick="showTab('chat')">
                            <i class="fas fa-comments"></i>
                            <span>Chat</span>
                        </li>
                        <li class="nav-item" onclick="showTab('share')">
                            <i class="fas fa-share-square"></i>
                            <span>Share</span>
                        </li>
                        <li class="nav-item" onclick="showTab('rewards')">
                            <i class="fas fa-gift"></i>
                            <span>Rewards</span>
                        </li>
                        <li class="nav-item" onclick="logout()">
                            <i class="fas fa-sign-out-alt"></i>
                            <span>Logout</span>
                        </li>
                    </ul>
                </div>
                
                <!-- Main Content -->
                <div class="main-content">
                    <!-- Feed Tab -->
                    <div id="feed-tab" class="tab-content active">
                        <div class="card">
                            <div class="create-post">
                                <div class="avatar" id="post-avatar">U</div>
                                <div class="post-input" onclick="showTab('share')">What's on your mind?</div>
                            </div>
                        </div>
                        
                        <div id="posts-container">
                            <!-- Posts will be loaded here -->
                            <div class="card">
                                <p class="text-center">Loading posts...</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Chat Tab -->
                    <div id="chat-tab" class="tab-content">
                        <div class="card">
                            <h2>Community Chat</h2>
                            <div class="chat-container">
                                <div class="chat-messages" id="chat-messages">
                                    <div class="message received">
                                        <div class="message-sender">System</div>
                                        <div class="message-content">
                                            Welcome to the community chat! Be respectful to other members.
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="chat-input">
                                    <input type="text" id="chat-input-field" placeholder="Type your message...">
                                    <button class="btn btn-primary" onclick="sendMessage()">Send</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Share Tab -->
                    <div id="share-tab" class="tab-content">
                        <div class="card">
                            <h2>Share with Community</h2>
                            <div class="upload-area" onclick="document.getElementById('media-upload').click()">
                                <i class="fas fa-cloud-upload-alt"></i>
                                <p>Click to upload an image or video</p>
                                <input type="file" id="media-upload" accept="image/*,video/*" style="display: none;">
                            </div>
                            <p id="selected-file" class="text-center">No file selected</p>
                            
                            <div class="form-group">
                                <label for="post-caption">Caption</label>
                                <textarea id="post-caption" class="form-control" rows="3" placeholder="What's on your mind?"></textarea>
                            </div>
                            
                            <button class="btn btn-primary" onclick="uploadPost()">Share Post</button>
                        </div>
                    </div>
                    
                    <!-- Rewards Tab -->
                    <div id="rewards-tab" class="tab-content">
                        <div class="card">
                            <h2>Your Rewards</h2>
                            <div class="points-display">
                                <h2 id="rewards-points">0</h2>
                                <p>Total Points ≈ $<span id="points-value">0.00</span> USD</p>
                            </div>
                            
                            <h3>How to Earn Points</h3>
                            <ul>
                                <li>Share a post: +5 points</li>
                                <li>Like a post: +1 point</li>
                                <li>Send a chat message: +1 point</li>
                                <li>Get a like on your post: +2 points</li>
                            </ul>
                        </div>
                        
                        <div class="card">
                            <h3>Redeem Rewards</h3>
                            <p>Conversion rate: 100 points = $1.00 USD</p>
                            
                            <div class="rewards-grid">
                                <div class="reward-card">
                                    <div class="reward-icon">
                                        <i class="fas fa-dollar-sign"></i>
                                    </div>
                                    <div class="reward-amount">$1.00</div>
                                    <p>100 points</p>
                                    <button class="btn btn-primary" onclick="withdrawPoints(100)">Redeem</button>
                                </div>
                                
                                <div class="reward-card">
                                    <div class="reward-icon">
                                        <i class="fas fa-dollar-sign"></i>
                                    </div>
                                    <div class="reward-amount">$5.00</div>
                                    <p>500 points</p>
                                    <button class="btn btn-primary" onclick="withdrawPoints(500)">Redeem</button>
                                </div>
                                
                                <div class="reward-card">
                                    <div class="reward-icon">
                                        <i class="fas fa-dollar-sign"></i>
                                    </div>
                                    <div class="reward-amount">$10.00</div>
                                    <p>1000 points</p>
                                    <button class="btn btn-primary" onclick="withdrawPoints(1000)">Redeem</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer>
        <p>&copy; 2023 SecureCommunity. All rights reserved.</p>
        <p>This content is protected by digital watermarking. Unauthorized recording or distribution is prohibited.</p>
    </footer>

    <script>
        // ==================== SUPABASE CONFIGURATION ====================
        // Replace with your actual Supabase URL and Key
        const SUPABASE_URL = 'https://your-project.supabase.co';
        const SUPABASE_ANON_KEY = 'your-anon-key';
        
        // Initialize Supabase
        const supabase = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        
        // ==================== GLOBAL VARIABLES ====================
        let currentUser = null;
        let userData = { points: 0, username: '' };
        
        // ==================== AUTHENTICATION FUNCTIONS ====================
        function showAuthTab(tabName) {
            // Hide all forms
            document.querySelectorAll('.auth-form').forEach(form => {
                form.classList.remove('active');
            });
            
            // Remove active class from all tabs
            document.querySelectorAll('.auth-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Show selected form and activate tab
            document.getElementById(tabName + '-form').classList.add('active');
            document.querySelector(`.auth-tab:nth-child(${tabName === 'login' ? 1 : 2})`).classList.add('active');
            
            // Clear alerts
            document.getElementById('login-alert').style.display = 'none';
            document.getElementById('register-alert').style.display = 'none';
        }
        
        function showAlert(elementId, message, isError = true) {
            const alertElement = document.getElementById(elementId);
            alertElement.textContent = message;
            alertElement.style.display = 'block';
            alertElement.className = isError ? 'alert alert-error' : 'alert alert-success';
        }
        
        async function register() {
            const email = document.getElementById('register-email').value;
            const password = document.getElementById('register-password').value;
            const username = document.getElementById('register-username').value;
            
            if (!email || !password || !username) {
                showAlert('register-alert', 'Please fill all fields');
                return;
            }
            
            if (password.length < 6) {
                showAlert('register-alert', 'Password must be at least 6 characters');
                return;
            }
            
            try {
                const { data, error } = await supabase.auth.signUp({
                    email: email,
                    password: password,
                });
                
                if (error) throw error;
                
                // Create user profile
                const { error: profileError } = await supabase
                    .from('profiles')
                    .insert([
                        { id: data.user.id, username: username, email: email, points: 100 }
                    ]);
                
                if (profileError) throw profileError;
                
                showAlert('register-alert', 'Account created successfully! Welcome!', false);
                setTimeout(() => {
                    loadUserData();
                }, 1500);
            } catch (error) {
                showAlert('register-alert', error.message);
            }
        }
        
        async function login() {
            const email = document.getElementById('login-email').value;
            const password = document.getElementById('login-password').value;
            
            if (!email || !password) {
                showAlert('login-alert', 'Please enter both email and password');
                return;
            }
            
            try {
                const { data, error } = await supabase.auth.signInWithPassword({
                    email: email,
                    password: password,
                });
                
                if (error) throw error;
                
                currentUser = data.user;
                await loadUserData();
            } catch (error) {
                showAlert('login-alert', error.message);
            }
        }
        
        function logout() {
            supabase.auth.signOut().then(() => {
                currentUser = null;
                document.getElementById('main-app').style.display = 'none';
                document.getElementById('auth-container').style.display = 'flex';
            });
        }
        
        // ==================== USER DATA & POINTS ====================
        async function loadUserData() {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) return;
            
            currentUser = user;
            
            // Get user profile
            const { data: profile, error } = await supabase
                .from('profiles')
                .select('*')
                .eq('id', user.id)
                .single();
            
            if (error) {
                console.error('Error loading user profile:', error);
                return;
            }
            
            userData = profile;
            
            // Update UI with user data
            document.getElementById('user-name').textContent = userData.username;
            document.getElementById('user-avatar').textContent = userData.username.charAt(0).toUpperCase();
            document.getElementById('post-avatar').textContent = userData.username.charAt(0).toUpperCase();
            document.getElementById('user-points').textContent = userData.points;
            document.getElementById('rewards-points').textContent = userData.points;
            document.getElementById('points-value').textContent = (userData.points / 100).toFixed(2);
            
            // Show main app
            document.getElementById('main-app').style.display = 'block';
            document.getElementById('auth-container').style.display = 'none';
            
            // Load additional data
            loadPosts();
            setupChat();
        }
        
        async function updateUserPoints(pointsToAdd) {
            if (!currentUser) return;
            
            const newPoints = userData.points + pointsToAdd;
            const { error } = await supabase
                .from('profiles')
                .update({ points: newPoints })
                .eq('id', currentUser.id);
            
            if (error) {
                console.error('Error updating points:', error);
                return;
            }
            
            userData.points = newPoints;
            
            // Update points display
            document.getElementById('user-points').textContent = newPoints;
            document.getElementById('rewards-points').textContent = newPoints;
            document.getElementById('points-value').textContent = (newPoints / 100).toFixed(2);
        }
        
        // ==================== POSTS & WATERMARKING ====================
        async function loadPosts() {
            const postsContainer = document.getElementById('posts-container');
            postsContainer.innerHTML = '<div class="card"><p class="text-center">Loading posts...</p></div>';
            
            const { data: posts, error } = await supabase
                .from('posts')
                .select(`
                    *,
                    profiles (username)
                `)
                .order('created_at', { ascending: false })
                .limit(20);
            
            if (error) {
                console.error('Error loading posts:', error);
                postsContainer.innerHTML = '<div class="card"><p class="text-center">Error loading posts</p></div>';
                return;
            }
            
            if (posts.length === 0) {
                postsContainer.innerHTML = '<div class="card"><p class="text-center">No posts yet. Be the first to share!</p></div>';
                return;
            }
            
            postsContainer.innerHTML = '';
            posts.forEach(post => {
                displayPost(post);
            });
        }
        
        function displayPost(post) {
            const postsContainer = document.getElementById('posts-container');
            const postElement = document.createElement('div');
            postElement.className = 'card post';
            postElement.id = 'post-' + post.id;
            
            postElement.innerHTML = `
                <div class="post-header">
                    <div class="avatar">${post.profiles?.username?.charAt(0).toUpperCase() || 'U'}</div>
                    <div>
                        <span class="post-user">${post.profiles?.username || 'Unknown'}</span>
                        <div class="post-time">${new Date(post.created_at).toLocaleString()}</div>
                    </div>
                </div>
                <div class="post-content">
                    <p>${post.content}</p>
                </div>
                ${post.image_url ? `
                <div class="media-container">
                    <img src="${post.image_url}" class="protected-media" alt="Post content" 
                         onload="addWatermark(this, '${post.profiles?.username || 'Unknown'}')">
                </div>
                ` : ''}
                <div class="post-actions">
                    <div class="post-action" onclick="likePost('${post.id}')">
                        <i class="fas fa-thumbs-up"></i>
                        <span>Like (${post.likes || 0})</span>
                    </div>
                    <div class="post-action">
                        <i class="fas fa-comment"></i>
                        <span>Comment</span>
                    </div>
                </div>
            `;
            
            postsContainer.appendChild(postElement);
        }
        
        function addWatermark(imgElement, authorName) {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            canvas.width = imgElement.naturalWidth;
            canvas.height = imgElement.naturalHeight;
            
            ctx.drawImage(imgElement, 0, 0);
            
            // Add watermark text
            ctx.font = '24px Arial';
            ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';
            ctx.textAlign = 'center';
            ctx.fillText(`© SecureCommunity - User: ${authorName}`, canvas.width / 2, canvas.height / 2);
            
            // Add tiling watermark for extra protection
            ctx.font = '16px Arial';
            ctx.fillStyle = 'rgba(255, 255, 255, 0.4)';
            for (let x = 0; x < canvas.width; x += 200) {
                for (let y = 0; y < canvas.height; y += 100) {
                    ctx.fillText(authorName, x, y);
                }
            }
            
            // Replace image with watermarked version
            imgElement.src = canvas.toDataURL('image/png');
        }
        
        document.getElementById('media-upload').addEventListener('change', function(e) {
            const file = e.target.files[0];
            document.getElementById('selected-file').textContent = file ? `Selected: ${file.name}` : 'No file selected';
        });
        
        async function uploadPost() {
            const file = document.getElementById('media-upload').files[0];
            const caption = document.getElementById('post-caption').value;
            
            if (!caption && !file) {
                alert('Please add a caption or media to share');
                return;
            }
            
            try {
                let imageUrl = '';
                
                if (file) {
                    // In a real app, you would upload to Supabase Storage
                    // For now, we'll use a placeholder
                    imageUrl = 'https://placehold.co/600x400?text=Uploaded+Image';
                    
                    // Actual implementation would be:
                    /*
                    const fileName = `${Math.random()}-${file.name}`;
                    const { data, error } = await supabase.storage
                        .from('post-images')
                        .upload(fileName, file);
                    
                    if (error) throw error;
                    
                    // Get public URL
                    const { data: { publicUrl } } = supabase.storage
                        .from('post-images')
                        .getPublicUrl(fileName);
                    
                    imageUrl = publicUrl;
                    */
                }
                
                const { data, error } = await supabase
                    .from('posts')
                    .insert([
                        { 
                            content: caption, 
                            image_url: imageUrl,
                            user_id: currentUser.id
                        }
                    ]);
                
                if (error) throw error;
                
                await updateUserPoints(5);
                alert('Post shared successfully! +5 points');
                
                // Reset form
                document.getElementById('post-caption').value = '';
                document.getElementById('media-upload').value = '';
                document.getElementById('selected-file').textContent = 'No file selected';
                
                // Reload posts
                loadPosts();
                showTab('feed');
            } catch (error) {
                alert('Error sharing post: ' + error.message);
            }
        }
        
        async function likePost(postId) {
            // In a real app, you would add a like to the post
            // For now, we'll just simulate it
            await updateUserPoints(1);
            
            // Update like count display
            const likeButton = document.querySelector(`#post-${postId} .post-action span`);
            if (likeButton) {
                const currentLikes = parseInt(likeButton.textContent.match(/\d+/)[0]) || 0;
                likeButton.textContent = `Like (${currentLikes + 1})`;
            }
        }
        
        // ==================== CHAT FUNCTIONALITY ====================
        function setupChat() {
            // In a real app, you would set up real-time subscriptions
            // For now, we'll just load initial messages
            loadMessages();
        }
        
        async function loadMessages() {
            const chatBox = document.getElementById('chat-messages');
            chatBox.innerHTML = '';
            
            // In a real app, you would fetch messages from Supabase
            // For now, we'll just show a welcome message
            const messageElement = document.createElement('div');
            messageElement.className = 'message received';
            messageElement.innerHTML = `
                <div class="message-sender">System</div>
                <div class="message-content">
                    Welcome to the community chat! Start a conversation.
                </div>
            `;
            chatBox.appendChild(messageElement);
        }
        
        async function sendMessage() {
            const input = document.getElementById('chat-input-field');
            const text = input.value.trim();
            
            if (!text) return;
            
            try {
                // In a real app, you would save the message to Supabase
                // For now, we'll just simulate it
                const chatBox = document.getElementById('chat-messages');
                
                const messageElement = document.createElement('div');
                messageElement.className = 'message sent';
                messageElement.innerHTML = `
                    <div class="message-sender">You</div>
                    <div class="message-content">${text}</div>
                `;
                
                chatBox.appendChild(messageElement);
                chatBox.scrollTop = chatBox.scrollHeight;
                
                await updateUserPoints(1);
                input.value = '';
            } catch (error) {
                alert('Error sending message: ' + error.message);
            }
        }
        
        // ==================== REWARDS & WITHDRAWAL ====================
        async function withdrawPoints(points) {
            if (userData.points < points) {
                alert('Not enough points');
                return;
            }
            
            // In a real app, this would integrate with a payment processor
            alert(`Withdrawal request for $${(points/100).toFixed(2)} submitted!`);
            await updateUserPoints(-points);
        }
        
        // ==================== UI NAVIGATION ====================
        function showTab(tabName) {
            // Update active nav item
            document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));
            document.querySelector(`.nav-item:nth-child(${['feed', 'chat', 'share', 'rewards'].indexOf(tabName) + 1})`).classList.add('active');
            
            // Show selected tab
            document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
            document.getElementById(tabName + '-tab').classList.add('active');
        }
        
        // ==================== INITIALIZATION ====================
        supabase.auth.onAuthStateChange(async (event, session) => {
            if (event === 'SIGNED_IN' && session) {
                currentUser = session.user;
                await loadUserData();
            } else if (event === 'SIGNED_OUT') {
                currentUser = null;
                document.getElementById('main-app').style.display = 'none';
                document.getElementById('auth-container').style.display = 'flex';
            }
        });
        
        // Handle Enter key in chat
        document.getElementById('chat-input-field').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') sendMessage();
        });
        
        // Check if user is already logged in
        supabase.auth.getSession().then(({ data: { session } }) => {
            if (session) {
                currentUser = session.user;
                loadUserData();
            }
        });
    </script>
</body>
</html>
